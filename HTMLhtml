<!DOCTYPE html>
<html lang="zh">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HEAVN 粘性时间线动画复刻</title>
    <style>
        /* -------------------------
         * 1. 全局和基础设置
         * ------------------------- */
        :root {
            --brand-yellow: #ffdc2e;
            --dark-bg: #111111;
            --light-text: #ffffff;
            --dark-text: #000000;
            --light-bg: #f5f5f5; /* 整个页面的浅色背景 */
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
            background-color: var(--light-bg);
            color: var(--dark-text);
        }

        /* 辅助容器（用于演示Slogan部分） */
        .full-screen-section {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            text-align: center;
            min-height: 100vh; /* 占满一个屏幕高度 */
            padding: 40px;
        }
        
        #slogan-section {
            background-color: var(--brand-yellow);
        }

        #slogan-section h1 {
            font-size: 5rem;
            font-weight: 600;
            line-height: 1.1;
        }

        #slogan-section p {
            font-size: 1.1rem;
            max-width: 600px;
            margin-top: 24px;
            line-height: 1.6;
        }
        
        /* -------------------------
         * 2. 时间线动画版面 (核心)
         * ------------------------- */
        
        /* * 这是整个动画部分的总容器.
         * 它使用 flex 布局来创建左右两栏。
        */
        .timeline-section {
            display: flex;
            position: relative;
        }

        /* * 2.1 左侧粘性面板
         * * 这是实现效果的第一个关键: `position: sticky`
         * 它会“粘”在屏幕顶部 (top: 0)，
         * 当它的父容器 (.timeline-section) 还在屏幕上时。
        */
        .timeline-sticky-left {
            flex: 1; /* 占据左侧 50% 宽度 */
            height: 100vh; /* 占据 100% 的屏幕高度 */
            position: sticky;
            top: 0;
            
            /* 布局和背景 */
            background-color: white; /* 初始背景色为白色 */
            display: flex;
            justify-content: center;
            align-items: center;
            overflow: hidden; /* 隐藏溢出的内容 */
            
            /* 背景色切换动画 */
            transition: background-color 0.5s ease;
        }

        /* 当左侧面板需要变暗时，JS会添加这个 .is-dark 类 */
        .timeline-sticky-left.is-dark {
            background-color: var(--dark-bg);
            color: var(--light-text); /* 内部文字变为浅色 */
        }

        /* * 2.2 左侧内容容器 (所有视觉元素) 
         *
         * 所有的图像、时钟都放在这里。
         * 它们通过 `position: absolute` 完美地堆叠在一起。
        */
        .timeline-visual {
            position: absolute;
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            
            /* * 这是动画的第二个关键: `opacity` 和 `transition`
             * 默认所有视觉元素都是透明的 (opacity: 0)
            */
            opacity: 0;
            transition: opacity 0.5s ease;
        }

        /* * JS 会给当前应该显示的那个视觉元素添加 .active 类
         * .active 类使其不透明 (opacity: 1)
        */
        .timeline-visual.active {
            opacity: 1;
        }
        
        /* 左侧的图像占位符 (模拟视频中的图像) */
        .timeline-visual .image-placeholder {
            width: 80%;
            height: 60%;
            background-color: #eee;
            border: 2px dashed #ccc;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 1.2rem;
            color: #666;
            border-radius: 8px;
            text-align: center;
            padding: 20px;
        }
        
        /* 变暗时的图像占位符 */
        .is-dark .timeline-visual .image-placeholder {
             background-color: #333;
             border-color: #555;
             color: #999;
        }


        /* * 2.3 时间线轨道 (垂直的线)
         *
         * 这就是视频中左侧的垂直线。
         * `calc(100% - 200px)` 让它有上下的边距。
        */
        .timeline-track {
            position: absolute;
            left: 40px; /* 距离左边缘 40px */
            top: 100px; /* 距离顶部 100px */
            height: calc(100% - 200px); /* 总高度减去上下边距 */
            width: 3px;
            background-color: #ddd;
            border-radius: 2px;
        }
        
        /* 暗模式下的轨道 */
        .is-dark .timeline-track {
            background-color: #444;
        }

        /* * 2.4 移动的黄色圆点
         *
         * 这就是那个黄色的圆点。
         * 它在轨道 (.timeline-track) 内部绝对定位。
         * 它的 `top` 属性将由 JavaScript 动态改变。
        */
        .timeline-dot {
            position: absolute;
            left: 50%; /* 在轨道的中心 */
            transform: translateX(-50%); /* 水平居中 */
            width: 24px;
            height: 24px;
            background-color: var(--brand-yellow);
            border-radius: 50%;
            
            /* 圆点移动动画 */
            transition: top 0.4s ease-out;
            
            /* 初始位置 (对应 08:00) */
            top: 0%; /* JS 会动态改变这个百分比 */
        }

        /* * 2.5 时钟
         * * 它也在左侧，由 JS 动态更新内容。
        */
        .timeline-clock {
            position: absolute;
            left: 80px; /* 在时间轨道的右侧 */
            font-size: 2.5rem;
            font-weight: 600;
            font-family: monospace;
            
            /* * 它的 top 属性也随圆点一起移动
            */
            top: 90px;
            transition: top 0.4s ease-out;
        }


        /* * 2.6 右侧滚动内容
         * * 这是右侧滚动的文本部分。
         * 它就是一堆堆叠在一起的 "step" 模块。
        */
        .timeline-scroll-right {
            flex: 1; /* 占据右侧 50% 宽度 */
            z-index: 10; /* 确保它在粘性元素之上 (如果需要的话) */
        }

        /* * 每一个 "step" 必须足够高 (例如 100vh，即一屏高)
         * 这样才能保证在滚动时，一次只触发一个动画。
         * 这就是它工作的秘诀。
        */
        .timeline-step {
            min-height: 100vh; /* 关键！每个步骤占满一屏 */
            padding: 40px;
            padding-left: 8%;
            display: flex;
            flex-direction: column;
            justify-content: center; /* 垂直居中 */
            
            /* 只是为了视觉区分 */
            border-bottom: 1px dashed #eee; 
        }

        .timeline-step h2 {
            font-size: 2.8rem;
            margin-bottom: 20px;
            max-width: 500px;
        }
        
        .timeline-step p {
            font-size: 1.1rem;
            line-height: 1.6;
            max-width: 500px;
            color: #333;
        }
        
        /* 用于最后的暗色步骤 */
        .timeline-step.is-dark-text {
            background-color: var(--dark-bg);
            color: var(--light-text);
        }
        
        .timeline-step.is-dark-text p {
            color: #ccc;
        }
    </style>
</head>
<body>

    <main>

        <section class="full-screen-section" id="slogan-section">
            <h1>Light that<br>feels like sun.</h1>
            <p>As the first hybrid of desk and daylight luminaire, HEAVN One delivers ideal light at any time of day and enhances your well-being and performance.</p>
        </section>

        <section class="timeline-section">

            <div class="timeline-sticky-left" id="sticky-container">
                
                <div class="timeline-track">
                    <div class="timeline-dot" id="timeline-dot"></div>
                </div>
                
                <div class="timeline-clock" id="timeline-clock">08:00</div>

                <div class="timeline-visual active" data-visual-for="08:00">
                    <div class="image-placeholder">[图像: 08:00 明亮的早晨日光]</div>
                </div>

                <div class="timeline-visual" data-visual-for="11:00">
                    <div class="image-placeholder">[图像: 11:00 专注工作特写]</div>
                </div>

                <div class="timeline-visual" data-visual-for="12:00">
                    <div class="image-placeholder">[图像: 12:00 视频会议正面补光]</div>
                </div>
                
                <div class="timeline-visual" data-visual-for="16:00">
                    <div class="image-placeholder">[图像: 16:00 室内氛围照明]</div>
                </div>

                <div class="timeline-visual" data-visual-for="21:00">
                    <div class="image-placeholder">[图像: 21:00 温暖的夜间灯光]</div>
                </div>
                
                <div class="timeline-visual" data-visual-for="24:00">
                    <div class="image-placeholder">[图像: 24:00 准备睡眠]</div>
                </div>

            </div>

            <div class="timeline-scroll-right">

                <div class="timeline-step" 
                     data-time="08:00" 
                     data-dot-pos="0%" 
                     data-theme="light">
                    <h2>Your working day with HEAVN One</h2>
                </div>
                
                <div class="timeline-step" 
                     data-time="08:00" 
                     data-dot-pos="0%"
                     data-theme="light">
                    <h2>The energy boost in the morning.</h2>
                    <p>The full-spectrum daylight lamp that can be switched on at the front is a real wake-up call. With an effect of up to 10,000 lux...</p>
                </div>

                <div class="timeline-step" 
                     data-time="11:00" 
                     data-dot-pos="25%"
                     data-theme="light">
                    <h2>Full light. Full focus.</h2>
                    <p>The downward desk illumination provides wide-area illumination with linear, shadow-free light.</p>
                </div>

                <div class="timeline-step" 
                     data-time="12:00" 
                     data-dot-pos="40%"
                     data-theme="light">
                    <h2>Sets the scene perfectly.</h2>
                    <p>The switchable, frontal light function acts like a soft box and creates a natural brightening of the area around the face.</p>
                </div>
                
                <div class="timeline-step" 
                     data-time="16:00" 
                     data-dot-pos="60%"
                     data-theme="light">
                    <h2>Outside dark. Inside atmospheric.</h2>
                    <p>The indirect light of HEAVN One creates an atmospheric ambience and eliminates the cave feeling of typical desk lamps.</p>
                </div>

                <div class="timeline-step is-dark-text" 
                     data-time="21:00" 
                     data-dot-pos="80%"
                     data-theme="dark"> <h2>Healthy sleep. Ideal regeneration.</h2>
                    <p>In the evening, the light from HEAVN One becomes warmer and stimulates the production of the sleep hormone melatonin.</p>
                </div>

                <div class="timeline-step is-dark-text" 
                     data-time="24:00" 
                     data-dot-pos="100%"
                     data-theme="dark"> <h2>Healthy sleep. Ideal regeneration.</h2>
                    <p>The result is healthy sleep - the best foundation for sustainable performance at work.</p>
                </div>

            </div>
        </section>
        
        <section class="full-screen-section">
            <h2>其他内容</h2>
            <p>粘性滚动区域到此结束。</p>
        </section>

    </main>

    <script>
        // 等待文档加载完毕
        document.addEventListener('DOMContentLoaded', () => {
            
            // ---------------------------------
            // 1. 获取所有需要的 DOM 元素
            // ---------------------------------
            
            // 右侧滚动的“步骤”
            const steps = document.querySelectorAll('.timeline-step');
            
            // 左侧所有的“视觉元素”（图像等）
            const visuals = document.querySelectorAll('.timeline-visual');
            
            // 左侧粘性容器
            const stickyContainer = document.getElementById('sticky-container');
            
            // 移动的圆点
            const timelineDot = document.getElementById('timeline-dot');
            
            // 时钟
            const timelineClock = document.getElementById('timeline-clock');
            
            // 时钟的初始 Y 位置 (90px)
            const clockInitialY = timelineClock.offsetTop;
            
            // 时间线轨道
            const timelineTrack = document.querySelector('.timeline-track');
            
            // 轨道的高度 (用于计算时钟的Y轴移动)
            const trackHeight = timelineTrack.offsetHeight;
            

            // ---------------------------------
            // 2. 创建一个“侦测器” (Intersection Observer)
            // 
            // 这是现代 JavaScript 中实现滚动动画的最佳方式。
            // 它可以“侦测”一个元素何时进入或离开屏幕。
            // ---------------------------------
            
            const observer = new IntersectionObserver(
                (entries) => {
                    // 遍历所有被侦测到的 "entry" (即滚动的步骤)
                    entries.forEach(entry => {
                        
                        // 当一个 "step" 元素进入视口（超过 50% 可见）时
                        if (entry.isIntersecting) {
                            
                            // ---------------------------------
                            // 3. 从 HTML 的 data-* 属性中读取数据
                            // ---------------------------------
                            const stepData = entry.target.dataset;
                            const time = stepData.time;
                            const dotPosPercent = stepData.dotPos;
                            const theme = stepData.theme;

                            // ---------------------------------
                            // 4. 更新左侧的视觉元素
                            // ---------------------------------
                            
                            // (A) 更新时钟文本
                            timelineClock.textContent = time;

                            // (B) 更新圆点位置
                            timelineDot.style.top = dotPosPercent;
                            
                            // (C) 更新时钟位置
                            // (计算: 初始Y + (轨道高度 * 百分比) - (时钟一半的高度))
                            // 这样可以让时钟的中心和圆点对齐
                            const newClockY = clockInitialY + (trackHeight * (parseFloat(dotPosPercent) / 100)) - (timelineClock.offsetHeight / 2) + (timelineDot.offsetHeight / 2);
                            timelineClock.style.top = `${newClockY}px`;


                            // (D) 切换左侧的主题（亮/暗）
                            if (theme === 'dark') {
                                stickyContainer.classList.add('is-dark');
                            } else {
                                stickyContainer.classList.remove('is-dark');
                            }
                            
                            // (E) 切换激活的视觉元素（图像）
                            
                            // (1) 首先，移除所有视觉元素的 'active' 类（让它们全部隐藏）
                            visuals.forEach(v => v.classList.remove('active'));
                            
                            // (2) 找到与当前时间匹配的那个视觉元素
                            // (例如 time '11:00' 对应 data-visual-for='11:00')
                            const activeVisual = document.querySelector(`.timeline-visual[data-visual-for="${time}"]`);
                            
                            // (3) 如果找到了，就给它添加 'active' 类（让它显示）
                            if(activeVisual) {
                                activeVisual.classList.add('active');
                            }
                        }
                    });
                }, 
                {
                    // 阈值：当元素 50% 可见时触发
                    // `rootMargin` 可以在中心点偏上或偏下的位置触发，
                    // 0.5 (50%) 对于居中触发来说很常用。
                    threshold: 0.5 
                }
            );

            // ---------------------------------
            // 5. 启动侦测器
            //
            // 让侦测器“监视”右侧的每一个 step 元素
            // ---------------------------------
            steps.forEach(step => {
                observer.observe(step);
            });
        });

    </script>

</body>
</html>
